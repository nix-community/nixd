/// \file
/// \brief Determine the kind of `nix::Expr`.

#pragma once

namespace nix {
class Expr;
} // namespace nix

namespace nixt {

/// \brief "ek" is short for "ExprKind".
///
/// This namespace contains all kinds of
/// unscoped enum `ExprKind`.
/// For convenience, you can `using namespace ek;` to ref these names directly.
namespace ek {

/// \brief Enumeration of all kinds of `nix::Expr`.
///
/// The name is prefixed with `EK_` to avoid name clashes with the AST nodes.
/// e.g. `EK_ExprInt`. These entries are generated by including `Nodes.inc`, so
/// members may not shown in generated docs.
enum ExprKind {

/// \cond PRIVATE
#define NIX_EXPR(EXPR) EK_##EXPR,
#include "Nodes.inc"
#undef NIX_EXPR
  /// \endcond
  LastExprKind, // should not be used.
};

} // namespace ek

/// \brief Determine the kind of `nix::Expr`.
/// \note This is based on dynamic_cast, so it is not very efficient.
ek::ExprKind kindOf(const nix::Expr &E);

/// \brief Get printable name of some kind.
const char *nameOf(ek::ExprKind Kind);

} // namespace nixt
